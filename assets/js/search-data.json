{
  
    
        "post0": {
            "title": "Key Driver Analysis",
            "content": "What is Key Driver Analysis? . Key Driver Analysis is also know as Importance Analysis, and Relative Importance Analysis. The goal of this analysis is to quantify the relative importance of each of the predictor variables in predicting the target variable. Each of the predictors is commonly referred to as a driver. . Generally the output of Key Driver Analys is a table or chart showing the Relative Importance of the drivers (predictors). . How is it different from traditional predictive models? . In classic predictive models the focus is on prediction, whereas with key driver analysis the main focus is on identifying the relative importance of the predictors (drivers). . What are the supported target types to perform Key Driver Analysis? . Key driver analysis can be performed on almost all types of target types that is binary, categorical and numerical. . How to perform Key Driver Analysis? . Key driver analysis can be performed with the any of the following techniques. . Correlations - appropriate when we&#39;re not concerned about multi-collinearity. | Jaccard coefficient/index - This is similar to correlation, except it is only appropriate when both the predictor and outcome variables are binary. | Generalized Linear Models (GLM) To conduct a valid key driver analysis we need to select an appropriate generalized linear model (GLM) which is consistent with our data. Linear Regression - for continues target variable | Logistic Regression - for binary target variable | Quasi Poisson Regression - for decimal target variable | Ordered Logistic Regression - for rating or ordered numerical target variable | . | . | Shapely Regression - This a regularized regression, designed for situations where linear regression results are unreliable due to high correlations between predictors. | Johnson Relative Weights - Similar to Shapley Regression, this is a regularized regression and it can be used for all types of target variables | Using Generalized Linear Models (GLMs) . In general when we build GLM&#39;s it&#39;s often observed that the coefficients are negative, however in case of key driver analysis this is an indicative of a problem. The causes could be: . The sign is wrong The predictor variable is highly correlated with other predictors | The predictor is unimportant | . | The predictor variable encoded incorrectly | Downsides of using GLM&#39;s for Key Driver Analysis: . GLMs become highly unreliable when the predictors are highly correlated (multi-collinearity) and tend to pick up random patterns in the data, hence the possibility of incorrect signs. | GLMs implicitly assume that predictors are on the same scale. So, it become hard to compare the coefficients directly. The most popular way to solve this problem is to divide the each value of predictor by it&#39;s standard deviation (i.e., to normalize or standardize the variables) but it does not necessarily solve the problem. | The solution to the above 2 problems is to not use GLMs 😊, and to instead use models that are more reliable when there are high correlations and can handle feature that are on different scales, such as Shapley regression and Johnson’s relative weights. These techniques do not solve the problem of correlated predictors. Rather, they ensure that you get stable results in the presence of correlated predictors. At a conceptual level, the way they do this is by computing importance scores as a weighted average of predictors, where the weights are determined by the extent of intercorrelation between the predictors. . Using Shapley regression or Johnson&#8217;s relative weights . As it&#39;s mentioned earlier, the traditional GLMs suffer from two practical challenges: sensitivity to high correlations between predictor variables, and, sensitivity to the scale of the predictor variables. Both problems can be addressed by using either Shapley regression or Johnson’s relative weights. . The underlying math of both Shapley regression and Johnson’s relative weight ensures that both techniques always report a positive importance score. . Finally, which method is recommended to perform Key Driver Analysis? . Both Shapley regression and Johnson’s relative weights are designed to address the same two problems: correlations between predictor variables and predictor variables with different scales. . The underlying theory of the two methods are completely different. . Shapley regression is based on running lots of linear regressions with different subsets of predictor variables. | Johnson’s relative weights is an orthonormal rotation of the predictor variables. | . Nevertheless, the two methods give essentially identical results, so there is no need to understand the intricacies of the two methods in order to choose one. There are, however, two practical difference between the methods: . Shapley regression is only applicable for linear regression. | Johnson’s Relative Weights is applicable for any GLM. | Johnson’s relative weights is much faster to compute than Shapley Regression. | . For these reasons, our preference is to always use Johnson’s relative weights 💪 for Key Driver Analysis . . Warning: Though the theoretical assumptions of Johnson’s relative weights and Shapley regression assumes a positive importance score. Sometimes we may see negative coefficients, which is a clear indication that key driver analysis is incorrect. . References . https://www.displayr.com/what-is-driver-analysis/ | https://www.displayr.com/the-problem-with-using-multiple-linear-regression-for-key-driver-analysis-a-case-study-of-the-cola-market/ | https://www.displayr.com/shapley-value-regression | https://www.statisticshowto.com/relative-weights/ | https://www.displayr.com/reasons-to-use-relative-weights/ | https://measuringu.com/key-drivers/ | .",
            "url": "https://bnriiitb.github.io/blog/key-driver-analysis/shapley-regression/driver-analysis/importance-analysis/relative-importance-analysis/2021/05/04/key-driver-analysis.html",
            "relUrl": "/key-driver-analysis/shapley-regression/driver-analysis/importance-analysis/relative-importance-analysis/2021/05/04/key-driver-analysis.html",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bnriiitb.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there 👋 . 🔭 I’m Naga, currently working as a Lead Data Scientist at TVS Motor Company | 🌱 I’m on a mission to generate value by leveraging AI! | 💬 Ask me about machine learning, deep learning, reinforcement learning and systems for learning from data at scale. | 📫 Reach out to me on LinkedIn http://linkedin.com/in/nagarajubudigam/ | .",
          "url": "https://bnriiitb.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bnriiitb.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}